schema{
  query: UserQuery,
  mutation: UserMutation
}

directive @protected (type: ProtectionType = DEFAULT, args: [String!] = [])
  on FIELD_DEFINITION | OBJECT | INTERFACE

enum ProtectionType{
  DOMAIN
  DEFAULT
}

type UserQuery{
  field: String
  protectedField: String @protected
  domainProtectedField(argA: String, argB: String):
    String @protected(type: DOMAIN, args: ["argA"])
  interface: Interface
  union: UnionT
  obj: Object
  protectedObj: ProtectedObject
  protInterface: ProtectedInterface 
  objProtInterface: ObjectImplProtInt
}

type UserMutation @protected{
  field: String
}

interface Interface{
  name: String
  otherName: String
  protectedName: String @protected
}

interface ProtectedInterface @protected{
  name: String
}

type Object implements Interface{
  name: String
  otherName: String @protected
  protectedName: String
  protectedField: String @protected
  domainProtectedField(argA: String, argB: String):
    String @protected(type: DOMAIN, args: ["argA"])
  field: String
}

type ProtectedObject implements Interface @protected{
  name: String
  otherName: String
  protectedName: String
  type: String
}

type ObjectImplProtInt implements ProtectedInterface{
  name: String
  field: String
}

type O1{
  field1: Int
  field1Protected: Int @protected
}

type O2 @protected{
  field2: Int
}

union UnionT = O1 | O2
