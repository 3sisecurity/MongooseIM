version: 2.1

references:
  - &OTP23 cimg/elixir:1.11  # Contains Erlang 23.1

executors:
  otp_23:
    working_directory: ~/app
    docker:
      - image: *OTP23

commands:
  install_erlang:
    parameters:
      otp_package:
        type: string
        description: Version of the Erlang package to install
    steps:
    - run:
        name: Install Erlang
        command: |
          sudo killall -9 apt-get || true && \
          sudo apt-get install -y esl-erlang=1:<<parameters.otp_package>>
  fetch_packages:
    steps:
    - run:
        name: Install basic packages
        command: |
          sudo killall -9 apt-get || true && \
          echo "Acquire::ForceIPv4 'true';" | sudo tee -a /etc/apt/apt.conf.d/99force-ipv4 && \
          wget https://packages.erlang-solutions.com/erlang-solutions_2.0_all.deb && \
          sudo dpkg -i erlang-solutions_2.0_all.deb && \
          sudo apt-get update && \
          sudo apt-get install unixodbc-dev -y && \
          sudo apt-get install unixodbc -y && \
          sudo apt-get install tdsodbc -y
  fetch_build_packages:
    steps:
      - run:
          name: Install packages necessary for building
          command: |
            sudo killall -9 apt-get || true && \
            echo "Acquire::ForceIPv4 'true';" | sudo tee -a /etc/apt/apt.conf.d/99force-ipv4 && \
            sudo apt-get update && \
            sudo apt-get install libssl-dev unixodbc-dev unixodbc tdsodbc rsync zlib1g-dev -y
  maybe_build_deps_and_cache:
    steps:
      - run:
          name: Prepare for cache
          command: echo $ERLANG_VERSION && echo $ERLANG_VERSION > otp_version
      - restore_cache:
          name: Maybe restore all rebar3 dependencies
          key: deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}--{{ checksum "otp_version" }}
      - run:
          name: Get deps
          command: |
            tools/configure with-all
            ./rebar3 get-deps
      - save_cache:
          name: Cache downloaded and built dependencies
          key: deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}--{{ checksum "otp_version" }}
          paths:
            - ~/.cache/rebar3
  build_and_cache_prod_build:
    steps:
      - run:
          name: Generate prod release
          command: |
            echo $ERLANG_VERSION > otp_version
            make rel
      - save_cache:
          key: prod-build-cache-{{ .Branch }}-{{ .Revision }}--{{ checksum "otp_version" }}
          paths: ~/app/_build/prod/rel/mongooseim
  persist_workspace:
    steps:
      - run: git gc
      - persist_to_workspace:
          root: ~/app/
          paths: ["*"]
  restore_workspace:
    steps:
      - attach_workspace: {at: ~/app}
      - run:
          name: Prepare for cache
          command: echo $ERLANG_VERSION > otp_version
      - restore_cache:
          key: deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}--{{ checksum "otp_version" }}

jobs:
  build:
    parallelism: 1
    machine:
      image: ubuntu-2004:202010-01
    parameters:
      otp_package:
        type: string
        description: Version of the Erlang package to install
      build_prod:
        type: boolean
        description: When enabled, prod release will be generated besides the dev ones
        default: false
    environment:
      SKIP_RELEASE: 1
      SKIP_COV: 0
    working_directory: ~/app
    steps:
      - checkout
      - fetch_packages
      - install_erlang:
          otp_package: <<parameters.otp_package>>
      - run:
          name: Prepare for cache
          command: |
            echo <<parameters.otp_package>> > otp_version
      - restore_cache:
          key: build-cache-{{ .Branch }}-{{ .Revision }}--{{ checksum "otp_version" }}
      - restore_cache:
          key: deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}--{{ checksum "otp_version" }}
      - run:
          name: Get deps
          command: |
            tools/configure with-all
            ./rebar3 get-deps
      - save_cache:
          key: deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}--{{ checksum "otp_version" }}
          paths:
            - ~/.cache/rebar3
      - run: ./rebar3 compile
      - run:
          name: Make Certs
          command: |
            make certs
      - run:
          name: Generate development releases
          command: ./tools/build-releases.sh
      - run:
          name: Generate prod release
          command: |
            # We cannot reuse releases generated in the previous step, because they are
            # built with dev_mode enabled (so they use symlinks for deps)
            if [ <<parameters.build_prod>> ]; then make rel; fi
      - run:
          name: Build Big Tests
          command: |
            tools/build-tests.sh
      - save_cache:
          key: build-cache-{{ .Branch }}-{{ .Revision }}--{{ checksum "otp_version" }}
          paths: ./

  xref:
    parallelism: 1
    machine:
      image: ubuntu-2004:202010-01
    working_directory: ~/app
    parameters:
      otp_package:
        type: string
        description: Version of the Erlang package to install
    steps:
      - checkout
      - fetch_packages
      - install_erlang:
          otp_package: <<parameters.otp_package>>
      - run:
          name: Run Xref
          command: |
            SKIP_AUTO_COMPILE=true KEEP_COVER_RUNNING=1 ./tools/test.sh -p xref_only -s false

  small_tests:
    parallelism: 1
    machine:
      image: ubuntu-2004:202010-01
    working_directory: ~/app
    parameters:
      otp_package:
        type: string
        description: Version of the Erlang package to install
    environment:
      PRESET: small_tests
    steps:
      - checkout
      - fetch_packages
      - install_erlang:
          otp_package: <<parameters.otp_package>>
      - run:
          name: Prepare for cache
          command: |
            echo <<parameters.otp_package>> > otp_version
      - restore_cache:
          keys:
            - build-cache-{{ .Branch }}-{{ .Revision }}--{{ checksum "otp_version" }}
      - restore_cache:
          keys:
            - deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}--{{ checksum "otp_version" }}
      - run:
          name: Run Small Tests
          command: |
            SKIP_AUTO_COMPILE=true KEEP_COVER_RUNNING=1 ./tools/test.sh -p small_tests -s true -e true
      - run:
          name: Coverage
          when: on_success
          command: |
            echo "Success!"
            pip3 install codecov && codecov
            ./rebar3 codecov analyze
            codecov --disable=gcov --env PRESET
      - run:
          name: Upload results
          when: always
          command: |
              tools/circleci-prepare-log-dir.sh
              if [ -n "${AWS_SECRET_ACCESS_KEY}" ]; then tools/circleci-upload-to-s3.sh; fi
      - run:
          name: Publish a comment to GitHub
          when: always
          command: |
              tools/circle-publish-github-comment.sh

  package:
    parallelism: 1
    machine:
      image: ubuntu-2004:202010-01
    working_directory: ~/app
    parameters:
      platform:
        type: enum
        enum: [centos_7, debian_stretch]
        description: Platform type
      otp_package:
        type: string
        description: Version of the Erlang package to install
    environment:
      pkg_PLATFORM: <<parameters.platform>>
      ESL_ERLANG_PKG_VER: <<parameters.otp_package>>
      PRESET: pkg
    steps:
      - checkout
      - run:
          name: Build package
          command: |
            KEEP_COVER_RUNNING=1 ./tools/test.sh -p pkg -s false

  big_tests:
    parallelism: 1
    machine:
      image: ubuntu-2004:202010-01
    working_directory: ~/app
    parameters:
      otp_package:
        type: string
        description: Version of the Erlang package to install
      preset:
        type: enum
        enum: [internal_mnesia, mysql_redis, odbc_mssql_mnesia, ldap_mnesia,
               elasticsearch_and_cassandra_mnesia, pgsql_mnesia, riak_mnesia]
        description: Preset to run
        default: internal_mnesia
      db:
        type: string
        description: Database to use
        default: mnesia
      tls_dist:
        type: boolean
        description: Erlang distribution with TLS enabled
        default: false
      spec:
        type: string
        description: Test spec file to use
        default: default.spec
    environment:
      MIX_ENV: test
      PRESET: <<parameters.preset>>
      DB: <<parameters.db>>
      TLS_DIST: <<parameters.tls_dist>>
      ELASTICSEARCH_VERSION: 5.6.9
      CASSANDRA_VERSION: 3.9
      TESTSPEC: <<parameters.spec>>
      REDIS_VERSION: 3.2.10
    steps:
      - checkout
      - fetch_packages
      - install_erlang:
          otp_package: <<parameters.otp_package>>
      - run:
          name: Prepare for cache
          command: |
            echo <<parameters.otp_package>> > otp_version
      - restore_cache:
          keys:
            - build-cache-{{ .Branch }}-{{ .Revision }}--{{ checksum "otp_version" }}
      - restore_cache:
          keys:
            - deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}--{{ checksum "otp_version" }}
      - run:
          name: Setup database
          command: |
            tools/setup-db.sh
            if [ $PRESET = ldap_mnesia ]; then sudo tools/setup-ldap.sh; fi
            sudo tools/setup-rmq.sh; tools/setup-redis.sh
            echo '127.0.0.1 muc.localhost' | sudo tee -a /etc/hosts
      - run:
          name: Run Big Tests
          command: |
            SKIP_AUTO_COMPILE=true KEEP_COVER_RUNNING=1 ./tools/test.sh -p $PRESET -s false
          no_output_timeout: 40m
      - run:
          name: Coverage
          when: on_success
          command: |
            echo "Success!"
            pip3 install codecov && codecov
            ./rebar3 codecov analyze
            codecov --disable=gcov --env PRESET
      - run:
          name: Build Failed - Logs
          when: on_fail
          command: |
            echo "Failure!"
            if [ -s _build/mim1/rel/mongooseim/log/crash.log ]; then cat _build/mim1/rel/mongooseim/log/crash.log; fi
            if [ -s _build/mim2/rel/mongooseim/log/crash.log ]; then cat _build/mim2/rel/mongooseim/log/crash.log; fi
            tail -100 _build/mim1/rel/mongooseim/log/mongooseim.log.1
            tail -100 _build/mim2/rel/mongooseim/log/mongooseim.log.1
      - run:
          name: Upload results
          when: always
          command: |
              tools/circleci-prepare-log-dir.sh
              if [ -n "${AWS_SECRET_ACCESS_KEY}" ]; then tools/circleci-upload-to-s3.sh; fi
      - run:
          name: Publish a comment to GitHub
          when: always
          command: |
              tools/circle-publish-github-comment.sh

  docker_image:
    parallelism: 1
    machine:
      image: ubuntu-2004:202010-01
    working_directory: ~/app
    parameters:
      otp_package:
        type: string
        description: Version of the Erlang package installed
    environment:
    steps:
      - checkout
      - run:
          name: Prepare for cache
          command: |
            echo <<parameters.otp_package>> > otp_version
      - restore_cache:
          keys:
            - build-cache-{{ .Branch }}-{{ .Revision }}--{{ checksum "otp_version" }}
      - restore_cache:
          keys:
            - deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}--{{ checksum "otp_version" }}
      - run:
          name: Execute Docker image build and upload
          command: tools/circle-build-and-push-docker.sh

  docs_build_deploy:
    parallelism: 1
    docker:
      - image: cimg/python:3.9.0
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Test that docs build
          command: |
            pip3 install mkdocs
            pip3 install mkdocs-material
            mkdocs build --strict
      - when:
          condition:
            or:
              - equal: [ master, << pipeline.git.branch >> ]
              - << pipeline.git.tag >>
          steps:
            - add_ssh_keys
            - run:
                name: Configure Git
                command: |
                  git config --global user.email "mongoose-im@erlang-solutions.com"
                  git config --global user.name "mongooseim"
            - run:
                name: Generate image tag
                command: |
                  set -x
                  if [ -n "$CIRCLE_TAG" ]; then
                      DOCS_TAG="$CIRCLE_TAG"
                  elif [ "$CIRCLE_BRANCH" == "master" ]; then
                      DOCS_TAG="latest"
                  else
                      DOCS_TAG=`echo $CIRCLE_BRANCH | sed 's,/,_,g'`
                  fi
                  env | sort
                  echo "export DOCS_TAG=$DOCS_TAG" >> $BASH_ENV
            - run:
                name: Build latest
                command: |
                  git fetch git@github.com:esl/MongooseDocs.git gh-pages:gh-pages
                  pip3 install mike
                  mike deploy $DOCS_TAG --remote git@github.com:esl/MongooseDocs.git --branch gh-pages --push --rebase

  build_in_docker:
    executor: << parameters.executor >>
    parameters:
      executor:
        type: executor
      build_prod:
        type: boolean
        default: false
    parallelism: 1
    environment:
      SKIP_RELEASE: 1
      SKIP_COV: 0
    steps:
      - checkout
      - fetch_build_packages
      - maybe_build_deps_and_cache
      - run: ./rebar3 compile
      - run: make certs
      - run:
          name: Generate development releases
          command: ./tools/build-releases.sh
      - when:
          condition: << parameters.build_prod >>
          steps: [ build_and_cache_prod_build ]
      - run:
          name: Build Big Tests
          command: tools/build-tests.sh
      - persist_workspace

  dialyzer:
    executor: << parameters.executor >>
    parameters:
      executor:
        type: executor
    parallelism: 1
    steps:
      - restore_workspace
      - run:
          name: Run Dialyzer
          command: |
            SKIP_AUTO_COMPILE=true KEEP_COVER_RUNNING=1 ./tools/test.sh -p dialyzer_only -s false

filters: &all_tags
  tags:
    only: /^\d+\.\d+\.\d+([a-z0-9\-\+])*/

workflows:
  version: 2
  build_and_test:
    jobs:
      # ======== BASE DOCKER BUILDS ========
      - build_in_docker:
          name: otp_23_docker
          executor: otp_23
          context: mongooseim-org
          build_prod: true
      # ============= DIALYZER =============
      - dialyzer:
          name: dialyzer
          executor: otp_23
          context: mongooseim-org
          requires:
            - otp_23_docker
          filters: *all_tags
      # ============= PACKAGES =============
      - package:
          name: centos_7
          platform: centos_7
          otp_package: 22.3.4.9-1
          context: mongooseim-org
          filters: *all_tags
      - package:
          name: debian_stretch
          platform: debian_stretch
          otp_package: 22.3.4.9-1
          context: mongooseim-org
          filters: *all_tags
      # ============= BASE BUILDS =============
      - build:
          name: otp_21_3
          otp_package: 21.3.8.17-1
          context: mongooseim-org
          filters: *all_tags
      - build:
          name: otp_22
          otp_package: 22.3.4.9-1
          build_prod: true
          context: mongooseim-org
          filters: *all_tags
      - build:
          name: otp_23
          otp_package: 23.0.3-1
          build_prod: true
          context: mongooseim-org
          filters: *all_tags
      # ============= SMALL TESTS =============
      - small_tests:
          name: small_tests_21_3
          otp_package: 21.3.8.17-1
          context: mongooseim-org
          requires:
            - otp_21_3
          filters: *all_tags
      - small_tests:
          name: small_tests_22
          otp_package: 22.3.4.9-1
          context: mongooseim-org
          requires:
            - otp_22
          filters: *all_tags
      - small_tests:
          name: small_tests_23
          otp_package: 23.0.3-1
          context: mongooseim-org
          requires:
            - otp_23
          filters: *all_tags
      # ============= XREF =============
      - xref:
          name: xref
          otp_package: 23.0.3-1
          context: mongooseim-org
          filters: *all_tags
      # ============= MOST RECENT VERSION TESTS =============
      - big_tests:
          name: mysql_redis
          otp_package: 23.0.3-1
          preset: mysql_redis
          db: mysql
          context: mongooseim-org
          requires:
            - otp_23
          filters: *all_tags
      - big_tests:
          name: mssql_mnesia
          otp_package: 23.0.3-1
          preset: odbc_mssql_mnesia
          db: mssql
          context: mongooseim-org
          requires:
            - otp_23
          filters: *all_tags
      - big_tests:
          name: internal_mnesia
          otp_package: 23.0.3-1
          preset: internal_mnesia
          db: "mnesia minio"
          tls_dist: true
          context: mongooseim-org
          requires:
            - otp_23
          filters: *all_tags
      - big_tests:
          name: elasticsearch_and_cassandra
          otp_package: 23.0.3-1
          preset: elasticsearch_and_cassandra_mnesia
          db: "elasticsearch cassandra"
          context: mongooseim-org
          requires:
            - otp_23
          filters: *all_tags
      - big_tests:
          name: riak_mnesia
          otp_package: 23.0.3-1
          preset: riak_mnesia
          db: riak
          context: mongooseim-org
          requires:
            - otp_23
          filters: *all_tags
      - big_tests:
          name: pgsql_mnesia
          otp_package: 23.0.3-1
          preset: pgsql_mnesia
          db: pgsql
          context: mongooseim-org
          requires:
            - otp_23
          filters: *all_tags
      - big_tests:
          name: ldap_mnesia_23
          otp_package: 23.0.3-1
          preset: ldap_mnesia
          db: mnesia
          context: mongooseim-org
          requires:
            - otp_23
          filters: *all_tags
      # ============= DYNAMIC DOMAINS =============
      - big_tests:
          name: dynamic_domains
          otp_package: 23.0.3-1
          spec: dynamic_domains.spec
          preset: pgsql_mnesia
          db: pgsql
          context: mongooseim-org
          requires:
            - otp_23
          filters: *all_tags
      # ============= 1 VERSION OLDER TESTS =============
      - big_tests:
          name: ldap_mnesia_22
          otp_package: 22.3.4.9-1
          preset: ldap_mnesia
          db: mnesia
          context: mongooseim-org
          requires:
            - otp_22
          filters: *all_tags
      # ============= 2 VERSIONS OLDER TESTS =============
      - big_tests:
          name: ldap_mnesia_21
          otp_package: 21.3.8.17-1
          preset: ldap_mnesia
          db: mnesia
          context: mongooseim-org
          requires:
            - otp_21_3
          filters: *all_tags
      # ============= DOCKER IMAGE BUILD & UPLOAD =============
      - docker_image:
          name: docker_build_and_ship
          context: mongooseim-org
          otp_package: 23.0.3-1
          requires:
            - ldap_mnesia_23
            - pgsql_mnesia
            - riak_mnesia
            - elasticsearch_and_cassandra
            - internal_mnesia
            - mysql_redis
            - mssql_mnesia
            - dialyzer
            - small_tests_22
            - small_tests_21_3
            - small_tests_23
          filters: *all_tags
      # ============= DOCUMENTATION =============
      - docs_build_deploy:
          name: build_and_deploy_docs
          context: mongooseim-org
          filters: *all_tags
